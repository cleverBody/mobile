{"version":3,"file":"user-C-PeXwOA.js","sources":["../../src/stores/user.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref } from 'vue'\n\nexport interface UserProfile {\n  id: number\n  nickname: string\n  avatar: string\n  signature?: string\n  birthday?: string\n  city?: string\n  province?: string\n  gender?: number // 0: 保密, 1: 男, 2: 女\n  followCount?: number\n  fansCount?: number\n  playlistCount?: number\n  level?: number\n  vipType?: number\n}\n\nexport interface LoginParams {\n  phone?: string\n  email?: string\n  password: string\n  captcha?: string\n}\n\nexport const useUserStore = defineStore('user', () => {\n  const isLoggedIn = ref(false)\n  const userProfile = ref<UserProfile | null>(null)\n  const token = ref<string>('')\n  const loading = ref(false)\n  const loginLoading = ref(false)\n  \n  const login = async (params: LoginParams) => {\n    loginLoading.value = true\n    try {\n      await mockLogin(params)\n    } catch (error) {\n      console.error('登录失败:', error)\n      throw error\n    } finally {\n      loginLoading.value = false\n    }\n  }\n  \n  const mockLogin = async (params: LoginParams) => {\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    \n    // 模拟登录验证\n    if (params.password !== '123456') {\n      throw new Error('用户名或密码错误')\n    }\n    \n    // 模拟登录成功\n    token.value = 'mock_token_' + Date.now()\n    isLoggedIn.value = true\n    \n    userProfile.value = {\n      id: 12345678,\n      nickname: '音乐爱好者',\n      avatar: '/images/default-avatar.jpg',\n      signature: '音乐是我的生命',\n      birthday: '1995-06-15',\n      city: '深圳市',\n      province: '广东省',\n      gender: 1,\n      followCount: 128,\n      fansCount: 256,\n      playlistCount: 15,\n      level: 8,\n      vipType: 0\n    }\n  }\n  \n  const loginWithPhone = async (phone: string, password: string, captcha?: string) => {\n    return login({ phone, password, captcha })\n  }\n  \n  const loginWithEmail = async (email: string, password: string) => {\n    return login({ email, password })\n  }\n  \n  const sendCaptcha = async (phone: string) => {\n    console.log('发送验证码到:', phone)\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    // 模拟发送成功\n    return { success: true }\n  }\n  \n  const logout = async () => {\n    try {\n      // TODO: 调用登出API\n      token.value = ''\n      isLoggedIn.value = false\n      userProfile.value = null\n      console.log('用户已登出')\n    } catch (error) {\n      console.error('登出失败:', error)\n      throw error\n    }\n  }\n  \n  const updateProfile = async (profile: Partial<UserProfile>) => {\n    loading.value = true\n    try {\n      // TODO: 调用更新个人信息API\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      \n      if (userProfile.value) {\n        Object.assign(userProfile.value, profile)\n      }\n      console.log('个人信息更新成功')\n    } catch (error) {\n      console.error('更新个人信息失败:', error)\n      throw error\n    } finally {\n      loading.value = false\n    }\n  }\n  \n  const refreshUserInfo = async () => {\n    if (!isLoggedIn.value) return\n    \n    loading.value = true\n    try {\n      // TODO: 调用获取用户信息API\n      await new Promise(resolve => setTimeout(resolve, 800))\n      // 模拟刷新用户信息\n      console.log('用户信息已刷新')\n    } catch (error) {\n      console.error('刷新用户信息失败:', error)\n    } finally {\n      loading.value = false\n    }\n  }\n  \n  const checkLoginStatus = () => {\n    // 检查本地存储的登录状态\n    const savedToken = localStorage.getItem('user_token')\n    const savedProfile = localStorage.getItem('user_profile')\n    \n    if (savedToken && savedProfile) {\n      try {\n        token.value = savedToken\n        userProfile.value = JSON.parse(savedProfile)\n        isLoggedIn.value = true\n      } catch (error) {\n        console.error('恢复登录状态失败:', error)\n        clearLocalData()\n      }\n    }\n  }\n  \n  const clearLocalData = () => {\n    localStorage.removeItem('user_token')\n    localStorage.removeItem('user_profile')\n  }\n  \n  // 自动保存到本地存储\n  const saveToLocal = () => {\n    if (isLoggedIn.value && token.value && userProfile.value) {\n      localStorage.setItem('user_token', token.value)\n      localStorage.setItem('user_profile', JSON.stringify(userProfile.value))\n    } else {\n      clearLocalData()\n    }\n  }\n  \n  return {\n    // 状态\n    isLoggedIn,\n    userProfile,\n    token,\n    loading,\n    loginLoading,\n    \n    // 方法\n    login,\n    loginWithPhone,\n    loginWithEmail,\n    sendCaptcha,\n    logout,\n    updateProfile,\n    refreshUserInfo,\n    checkLoginStatus,\n    saveToLocal\n  }\n}, {\n  persist: {\n    paths: ['isLoggedIn', 'userProfile', 'token']\n  }\n})"],"names":["useUserStore","defineStore","isLoggedIn","ref","userProfile","token","loading","loginLoading","login","params","mockLogin","error","resolve","loginWithPhone","phone","password","captcha","loginWithEmail","email","sendCaptcha","logout","updateProfile","profile","refreshUserInfo","checkLoginStatus","savedToken","savedProfile","clearLocalData"],"mappings":"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"}