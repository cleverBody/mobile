{"version":3,"file":"player-DkPa5aRc.js","sources":["../../src/stores/player.ts"],"sourcesContent":["import { defineStore } from 'pinia'\nimport { ref, computed, watch } from 'vue'\nimport { Howl } from 'howler'\nimport { useMusicStore } from './music'\nimport { musicApi } from '@/api/music'\n\nexport const usePlayerStore = defineStore('player', () => {\n  // 状态\n  const isPlaying = ref(false)\n  const currentTime = ref(0)\n  const duration = ref(0)\n  const volume = ref(0.8)\n  const playMode = ref<'order' | 'random' | 'repeat'>('order') // 播放模式\n  const isLoading = ref(false)\n  const error = ref<string | null>(null)\n  \n  // Howler 实例\n  let howlInstance: Howl | null = null\n  let progressTimer: number | null = null\n  \n  // 计算属性\n  const progressPercent = computed(() => {\n    return duration.value > 0 ? (currentTime.value / duration.value) * 100 : 0\n  })\n  \n  const formatTime = (time: number) => {\n    const minutes = Math.floor(time / 60)\n    const seconds = Math.floor(time % 60)\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`\n  }\n  \n  const currentTimeFormatted = computed(() => formatTime(currentTime.value))\n  const durationFormatted = computed(() => formatTime(duration.value))\n  \n  // 获取音乐store\n  const musicStore = useMusicStore()\n  \n  // 获取歌曲播放URL\n  const getSongPlayUrl = async (songId: number): Promise<string | null> => {\n    try {\n      const response = await musicApi.getSongUrl(songId)\n      if (response.data && response.data.length > 0) {\n        const songData = response.data.find(item => item.id === songId)\n        if (songData?.url) {\n          return songData.url\n        } else {\n          console.warn('歌曲播放链接为空，可能因为版权限制:', songData)\n          return null\n        }\n      }\n      return null\n    } catch (err) {\n      console.error('获取歌曲URL失败:', err)\n      return null\n    }\n  }\n  \n  // 方法\n  const initPlayer = async (url: string) => {\n    try {\n      // 销毁之前的实例\n      if (howlInstance) {\n        howlInstance.unload()\n      }\n      \n      // 重置状态\n      isLoading.value = true\n      error.value = null\n      currentTime.value = 0\n      duration.value = 0\n      \n      howlInstance = new Howl({\n        src: [url],\n        html5: true,\n        volume: volume.value,\n        preload: true,\n        onload: () => {\n          isLoading.value = false\n          duration.value = howlInstance?.duration() || 0\n          console.log('音频加载完成，时长:', duration.value)\n        },\n        onloaderror: (_id, err) => {\n          console.error('音频加载失败:', err)\n          isLoading.value = false\n          error.value = '音频加载失败'\n        },\n        onplay: () => {\n          isPlaying.value = true\n          startProgressTimer()\n          console.log('开始播放')\n        },\n        onpause: () => {\n          isPlaying.value = false\n          stopProgressTimer()\n          console.log('暂停播放')\n        },\n        onend: () => {\n          isPlaying.value = false\n          stopProgressTimer()\n          handleSongEnd()\n          console.log('播放结束')\n        },\n        onstop: () => {\n          isPlaying.value = false\n          stopProgressTimer()\n          currentTime.value = 0\n          console.log('停止播放')\n        }\n      })\n    } catch (err) {\n      console.error('初始化播放器失败:', err)\n      isLoading.value = false\n      error.value = '初始化失败'\n    }\n  }\n  \n  const play = () => {\n    if (howlInstance && !isLoading.value) {\n      try {\n        howlInstance.play()\n      } catch (err) {\n        console.error('播放失败:', err)\n        error.value = '播放失败'\n      }\n    }\n  }\n  \n  const pause = () => {\n    if (howlInstance) {\n      try {\n        howlInstance.pause()\n      } catch (err) {\n        console.error('暂停失败:', err)\n      }\n    }\n  }\n  \n  const stop = () => {\n    if (howlInstance) {\n      try {\n        howlInstance.stop()\n      } catch (err) {\n        console.error('停止失败:', err)\n      }\n    }\n  }\n  \n  const seek = (time: number) => {\n    if (howlInstance && duration.value > 0) {\n      try {\n        // 确保时间在有效范围内\n        const seekTime = Math.max(0, Math.min(time, duration.value))\n        howlInstance.seek(seekTime)\n        currentTime.value = seekTime\n      } catch (err) {\n        console.error('跳转失败:', err)\n      }\n    }\n  }\n  \n  const setVolume = (vol: number) => {\n    // 确保音量在0-1范围内\n    const newVolume = Math.max(0, Math.min(vol, 1))\n    volume.value = newVolume\n    if (howlInstance) {\n      try {\n        howlInstance.volume(newVolume)\n      } catch (err) {\n        console.error('设置音量失败:', err)\n      }\n    }\n  }\n  \n  const startProgressTimer = () => {\n    stopProgressTimer()\n    progressTimer = window.setInterval(() => {\n      if (howlInstance && isPlaying.value) {\n        try {\n          const seek = howlInstance.seek()\n          if (typeof seek === 'number') {\n            currentTime.value = seek\n          }\n        } catch (err) {\n          console.error('获取播放进度失败:', err)\n          stopProgressTimer()\n        }\n      }\n    }, 100) // 每100ms更新一次进度\n  }\n  \n  const stopProgressTimer = () => {\n    if (progressTimer) {\n      clearInterval(progressTimer)\n      progressTimer = null\n    }\n  }\n  \n  const handleSongEnd = () => {\n    switch (playMode.value) {\n      case 'order':\n        // 顺序播放：播放下一首\n        if (musicStore.hasNext) {\n          nextSong()\n        }\n        break\n      case 'random':\n        // 随机播放：随机选择一首\n        const playlist = musicStore.playlist\n        if (playlist.length > 0) {\n          const randomIndex = Math.floor(Math.random() * playlist.length)\n          musicStore.currentIndex = randomIndex\n          musicStore.setCurrentSong(playlist[randomIndex])\n        }\n        break\n      case 'repeat':\n        // 单曲循环：重新播放当前歌曲\n        if (howlInstance) {\n          currentTime.value = 0\n          howlInstance.seek(0)\n          howlInstance.play()\n        }\n        break\n    }\n  }\n  \n  const nextSong = () => {\n    if (musicStore.hasNext) {\n      musicStore.nextSong()\n    }\n  }\n  \n  const prevSong = () => {\n    if (musicStore.hasPrev) {\n      musicStore.prevSong()\n    }\n  }\n  \n  const togglePlayMode = () => {\n    const modes: Array<'order' | 'random' | 'repeat'> = ['order', 'random', 'repeat']\n    const currentIndex = modes.indexOf(playMode.value)\n    playMode.value = modes[(currentIndex + 1) % modes.length]\n    \n    // 提示用户当前播放模式\n    const modeNames = {\n      'order': '顺序播放',\n      'random': '随机播放',\n      'repeat': '单曲循环'\n    }\n    console.log('切换播放模式:', modeNames[playMode.value])\n  }\n  \n  const resetPlayer = () => {\n    stop()\n    currentTime.value = 0\n    duration.value = 0\n    error.value = null\n    isLoading.value = false\n  }\n  \n  // 监听当前歌曲变化，自动加载新歌曲\n  watch(\n    () => musicStore.currentSong,\n    async (newSong, oldSong) => {\n      if (newSong && newSong.id !== oldSong?.id) {\n        console.log('歌曲变化，加载新歌曲:', newSong.name)\n        \n        try {\n          // 获取真实的播放URL\n          const realUrl = await getSongPlayUrl(newSong.id)\n          if (realUrl) {\n            await initPlayer(realUrl)\n            \n            // 如果之前在播放，新歌曲加载完成后自动播放\n            if (oldSong && isPlaying.value) {\n              play()\n            }\n          } else {\n            error.value = '无法获取歌曲播放链接'\n            console.error('歌曲播放链接为空:', newSong.id)\n          }\n        } catch (err) {\n          console.error('获取歌曲播放链接失败:', err)\n          error.value = '获取播放链接失败'\n        }\n      }\n    },\n    { immediate: false }\n  )\n  \n  // 监听音量变化\n  watch(volume, (newVolume) => {\n    if (howlInstance) {\n      howlInstance.volume(newVolume)\n    }\n  })\n  \n  return {\n    // 状态\n    isPlaying,\n    currentTime,\n    duration,\n    volume,\n    playMode,\n    isLoading,\n    error,\n    \n    // 计算属性\n    progressPercent,\n    currentTimeFormatted,\n    durationFormatted,\n    \n    // 方法\n    initPlayer,\n    play,\n    pause,\n    stop,\n    seek,\n    setVolume,\n    togglePlayMode,\n    nextSong,\n    prevSong,\n    resetPlayer\n  }\n}, {\n  persist: {\n    paths: ['volume', 'playMode']\n  }\n})"],"names":["usePlayerStore","defineStore","isPlaying","ref","currentTime","duration","volume","playMode","isLoading","error","howlInstance","progressTimer","progressPercent","computed","formatTime","time","minutes","seconds","currentTimeFormatted","durationFormatted","musicStore","useMusicStore","getSongPlayUrl","songId","response","musicApi","songData","item","err","initPlayer","url","Howl","_id","startProgressTimer","stopProgressTimer","handleSongEnd","play","pause","stop","seek","seekTime","setVolume","vol","newVolume","nextSong","playlist","randomIndex","prevSong","togglePlayMode","modes","currentIndex","resetPlayer","watch","newSong","oldSong","realUrl"],"mappings":"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"}